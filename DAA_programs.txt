The factorial of the integer , written , is defined as:
           n!=n*(n-1)*(n-2)*....*3*2*1

Calculate and print the factorial of a given integer.


Function Description

Complete the extraLongFactorials function in the editor below. It should print the result and return.

extraLongFactorials has the following parameter(s):

n: an integer
Note: Factorials of n>20 can't be stored even in a  64-bit long long variable. Big integers must be used for such calculations. Languages like Java, Python, Ruby etc. can handle big integers, but we need to write additional code in C/C++ to handle huge values.

We recommend solving this challenge using BigIntegers

Solution:
import java.io.*;
import java.util.*;
import java.math.BigInteger;

public class ExtraLongFactorial {

    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int factorialNum = sc.nextInt();
        BigInteger bigInt = new BigInteger(""+factorialNum);
        for(int i = 1;i<factorialNum;i++){
            bigInt=bigInt.multiply(new BigInteger(""+(factorialNum-i)));
        }
        System.out.println(bigInt);
        
    }
}

****************************************************************************************************************************************

David has several containers, each with a number of balls in it. He has just enough containers to sort each type of ball he has into its own container. David wants to sort the balls using his sort method.

As an example, David has  containers and  different types of balls, both of which are numbered from  to . The distribution of ball types per container are described by an  matrix of integers, . For example, consider the following diagram for :

image

In a single operation, David can swap two balls located in different containers.

The diagram below depicts a single swap operation:

image

David wants to perform some number of swap operations such that:

Each container contains only balls of the same type.
No two balls of the same type are located in different containers.
You must perform  queries where each query is in the form of a matrix, . For each query, print Possible on a new line if David can satisfy the conditions above for the given matrix. Otherwise, print Impossible.

Function Description

Complete the organizingContainers function in the editor below. It should return a string, either Possible or Impossible.

organizingContainers has the following parameter(s):

containter: a two dimensional array of integers that represent the number of balls of each color in each container

Solution:

#include <iostream>
#include <algorithm>
#define ll long long
using namespace std;
int main() {
 int t; cin >> t;
 while( t-- ) {
      int n; cin >> n;
      ll row[n], col[n];
      int i, j;
      for(i=0; i<n; i++) row[i] = col[i] = 0;
      for(i=0; i<n; i++ ) {
           for(j=0;j<n;j++) {
                int x; cin >> x;
                row[i] += x; col[j] += x;
           }
       }
       sort(row, row+n);
       sort(col, col+n);
       bool ok = true;
       for(i=0; i<n ;i++) {
           if(row[i] != col[i]) {
              ok = false;
              break;
           }
       }
       if(ok==true)
           cout<<"Possible"<<endl;
       else
           cout<<"Impossible"<<endl;
 }
 return 0;
}

*******************************************************************************************************************************************
Insertion Sort Advanced Analysis

def inversions(arr):
    n = len(arr)
    if n==1:
        return 0
    n1 = n/2
    n2 = n - n1
    arr1 = arr[:n1]
    arr2 = arr[n1:]
    ans = inversions(arr1) + inversions(arr2)
    i1 = 0
    i2 = 0
    for i in range(n):
        if i1 <n1 and (i2>=n2 or arr1[i1]<=arr2[i2]):
            arr[i] = arr1[i1]
            ans += i2
            i1 += 1 
        elif i2 < n2:
            arr[i] = arr2[i2]
            i2 += 1
    return ans

for _ in range(input()):
    n = input()
    arr = map(int,raw_input().split())
    counts = inversions(arr)
    print counts

*************************************************************************************************************************************
